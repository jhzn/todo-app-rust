// This file is generated by rust-protobuf 2.8.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `todo.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_2;

#[derive(PartialEq,Clone,Default)]
pub struct TodoTaskEntity {
    // message fields
    pub ID: i64,
    pub Task: ::protobuf::SingularPtrField<TodoTask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TodoTaskEntity {
    fn default() -> &'a TodoTaskEntity {
        <TodoTaskEntity as ::protobuf::Message>::default_instance()
    }
}

impl TodoTaskEntity {
    pub fn new() -> TodoTaskEntity {
        ::std::default::Default::default()
    }

    // int64 ID = 1;


    pub fn get_ID(&self) -> i64 {
        self.ID
    }
    pub fn clear_ID(&mut self) {
        self.ID = 0;
    }

    // Param is passed by value, moved
    pub fn set_ID(&mut self, v: i64) {
        self.ID = v;
    }

    // .todo.TodoTask Task = 2;


    pub fn get_Task(&self) -> &TodoTask {
        self.Task.as_ref().unwrap_or_else(|| TodoTask::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTask) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTask {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTask {
        self.Task.take().unwrap_or_else(|| TodoTask::new())
    }
}

impl ::protobuf::Message for TodoTaskEntity {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ID = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ID != 0 {
            my_size += ::protobuf::rt::value_size(1, self.ID, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ID != 0 {
            os.write_int64(1, self.ID)?;
        }
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TodoTaskEntity {
        TodoTaskEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ID",
                    |m: &TodoTaskEntity| { &m.ID },
                    |m: &mut TodoTaskEntity| { &mut m.ID },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTask>>(
                    "Task",
                    |m: &TodoTaskEntity| { &m.Task },
                    |m: &mut TodoTaskEntity| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TodoTaskEntity>(
                    "TodoTaskEntity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TodoTaskEntity {
        static mut instance: ::protobuf::lazy::Lazy<TodoTaskEntity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TodoTaskEntity,
        };
        unsafe {
            instance.get(TodoTaskEntity::new)
        }
    }
}

impl ::protobuf::Clear for TodoTaskEntity {
    fn clear(&mut self) {
        self.ID = 0;
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TodoTaskEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TodoTaskEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TodoTask {
    // message fields
    pub Name: ::std::string::String,
    pub IsFininshed: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TodoTask {
    fn default() -> &'a TodoTask {
        <TodoTask as ::protobuf::Message>::default_instance()
    }
}

impl TodoTask {
    pub fn new() -> TodoTask {
        ::std::default::Default::default()
    }

    // string Name = 2;


    pub fn get_Name(&self) -> &str {
        &self.Name
    }
    pub fn clear_Name(&mut self) {
        self.Name.clear();
    }

    // Param is passed by value, moved
    pub fn set_Name(&mut self, v: ::std::string::String) {
        self.Name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Name(&mut self) -> &mut ::std::string::String {
        &mut self.Name
    }

    // Take field
    pub fn take_Name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Name, ::std::string::String::new())
    }

    // bool IsFininshed = 3;


    pub fn get_IsFininshed(&self) -> bool {
        self.IsFininshed
    }
    pub fn clear_IsFininshed(&mut self) {
        self.IsFininshed = false;
    }

    // Param is passed by value, moved
    pub fn set_IsFininshed(&mut self, v: bool) {
        self.IsFininshed = v;
    }
}

impl ::protobuf::Message for TodoTask {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.IsFininshed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.Name);
        }
        if self.IsFininshed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Name.is_empty() {
            os.write_string(2, &self.Name)?;
        }
        if self.IsFininshed != false {
            os.write_bool(3, self.IsFininshed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TodoTask {
        TodoTask::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "Name",
                    |m: &TodoTask| { &m.Name },
                    |m: &mut TodoTask| { &mut m.Name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "IsFininshed",
                    |m: &TodoTask| { &m.IsFininshed },
                    |m: &mut TodoTask| { &mut m.IsFininshed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TodoTask>(
                    "TodoTask",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TodoTask {
        static mut instance: ::protobuf::lazy::Lazy<TodoTask> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TodoTask,
        };
        unsafe {
            instance.get(TodoTask::new)
        }
    }
}

impl ::protobuf::Clear for TodoTask {
    fn clear(&mut self) {
        self.Name.clear();
        self.IsFininshed = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TodoTask {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TodoTask {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTaskRequest {
    // message fields
    pub TaskID: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTaskRequest {
    fn default() -> &'a GetTaskRequest {
        <GetTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTaskRequest {
    pub fn new() -> GetTaskRequest {
        ::std::default::Default::default()
    }

    // int64 TaskID = 1;


    pub fn get_TaskID(&self) -> i64 {
        self.TaskID
    }
    pub fn clear_TaskID(&mut self) {
        self.TaskID = 0;
    }

    // Param is passed by value, moved
    pub fn set_TaskID(&mut self, v: i64) {
        self.TaskID = v;
    }
}

impl ::protobuf::Message for GetTaskRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.TaskID = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.TaskID != 0 {
            my_size += ::protobuf::rt::value_size(1, self.TaskID, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.TaskID != 0 {
            os.write_int64(1, self.TaskID)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTaskRequest {
        GetTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "TaskID",
                    |m: &GetTaskRequest| { &m.TaskID },
                    |m: &mut GetTaskRequest| { &mut m.TaskID },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTaskRequest>(
                    "GetTaskRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTaskRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetTaskRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTaskRequest,
        };
        unsafe {
            instance.get(GetTaskRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetTaskRequest {
    fn clear(&mut self) {
        self.TaskID = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTaskResponse {
    // message fields
    pub Task: ::protobuf::SingularPtrField<TodoTaskEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTaskResponse {
    fn default() -> &'a GetTaskResponse {
        <GetTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTaskResponse {
    pub fn new() -> GetTaskResponse {
        ::std::default::Default::default()
    }

    // .todo.TodoTaskEntity Task = 1;


    pub fn get_Task(&self) -> &TodoTaskEntity {
        self.Task.as_ref().unwrap_or_else(|| TodoTaskEntity::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTaskEntity) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTaskEntity {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTaskEntity {
        self.Task.take().unwrap_or_else(|| TodoTaskEntity::new())
    }
}

impl ::protobuf::Message for GetTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTaskResponse {
        GetTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTaskEntity>>(
                    "Task",
                    |m: &GetTaskResponse| { &m.Task },
                    |m: &mut GetTaskResponse| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTaskResponse>(
                    "GetTaskResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTaskResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetTaskResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTaskResponse,
        };
        unsafe {
            instance.get(GetTaskResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetTaskResponse {
    fn clear(&mut self) {
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListTasksRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListTasksRequest {
    fn default() -> &'a ListTasksRequest {
        <ListTasksRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListTasksRequest {
    pub fn new() -> ListTasksRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListTasksRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListTasksRequest {
        ListTasksRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ListTasksRequest>(
                    "ListTasksRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListTasksRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListTasksRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListTasksRequest,
        };
        unsafe {
            instance.get(ListTasksRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListTasksRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListTasksRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTasksRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListTasksResponse {
    // message fields
    pub Tasks: ::protobuf::RepeatedField<TodoTaskEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListTasksResponse {
    fn default() -> &'a ListTasksResponse {
        <ListTasksResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListTasksResponse {
    pub fn new() -> ListTasksResponse {
        ::std::default::Default::default()
    }

    // repeated .todo.TodoTaskEntity Tasks = 1;


    pub fn get_Tasks(&self) -> &[TodoTaskEntity] {
        &self.Tasks
    }
    pub fn clear_Tasks(&mut self) {
        self.Tasks.clear();
    }

    // Param is passed by value, moved
    pub fn set_Tasks(&mut self, v: ::protobuf::RepeatedField<TodoTaskEntity>) {
        self.Tasks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_Tasks(&mut self) -> &mut ::protobuf::RepeatedField<TodoTaskEntity> {
        &mut self.Tasks
    }

    // Take field
    pub fn take_Tasks(&mut self) -> ::protobuf::RepeatedField<TodoTaskEntity> {
        ::std::mem::replace(&mut self.Tasks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListTasksResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Tasks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.Tasks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.Tasks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.Tasks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListTasksResponse {
        ListTasksResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTaskEntity>>(
                    "Tasks",
                    |m: &ListTasksResponse| { &m.Tasks },
                    |m: &mut ListTasksResponse| { &mut m.Tasks },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListTasksResponse>(
                    "ListTasksResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListTasksResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListTasksResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListTasksResponse,
        };
        unsafe {
            instance.get(ListTasksResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListTasksResponse {
    fn clear(&mut self) {
        self.Tasks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListTasksResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListTasksResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddTaskRequest {
    // message fields
    pub Task: ::protobuf::SingularPtrField<TodoTask>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddTaskRequest {
    fn default() -> &'a AddTaskRequest {
        <AddTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl AddTaskRequest {
    pub fn new() -> AddTaskRequest {
        ::std::default::Default::default()
    }

    // .todo.TodoTask Task = 1;


    pub fn get_Task(&self) -> &TodoTask {
        self.Task.as_ref().unwrap_or_else(|| TodoTask::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTask) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTask {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTask {
        self.Task.take().unwrap_or_else(|| TodoTask::new())
    }
}

impl ::protobuf::Message for AddTaskRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddTaskRequest {
        AddTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTask>>(
                    "Task",
                    |m: &AddTaskRequest| { &m.Task },
                    |m: &mut AddTaskRequest| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddTaskRequest>(
                    "AddTaskRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddTaskRequest {
        static mut instance: ::protobuf::lazy::Lazy<AddTaskRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddTaskRequest,
        };
        unsafe {
            instance.get(AddTaskRequest::new)
        }
    }
}

impl ::protobuf::Clear for AddTaskRequest {
    fn clear(&mut self) {
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddTaskResponse {
    // message fields
    pub Task: ::protobuf::SingularPtrField<TodoTaskEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddTaskResponse {
    fn default() -> &'a AddTaskResponse {
        <AddTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl AddTaskResponse {
    pub fn new() -> AddTaskResponse {
        ::std::default::Default::default()
    }

    // .todo.TodoTaskEntity Task = 1;


    pub fn get_Task(&self) -> &TodoTaskEntity {
        self.Task.as_ref().unwrap_or_else(|| TodoTaskEntity::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTaskEntity) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTaskEntity {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTaskEntity {
        self.Task.take().unwrap_or_else(|| TodoTaskEntity::new())
    }
}

impl ::protobuf::Message for AddTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddTaskResponse {
        AddTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTaskEntity>>(
                    "Task",
                    |m: &AddTaskResponse| { &m.Task },
                    |m: &mut AddTaskResponse| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AddTaskResponse>(
                    "AddTaskResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AddTaskResponse {
        static mut instance: ::protobuf::lazy::Lazy<AddTaskResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AddTaskResponse,
        };
        unsafe {
            instance.get(AddTaskResponse::new)
        }
    }
}

impl ::protobuf::Clear for AddTaskResponse {
    fn clear(&mut self) {
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateTaskRequest {
    // message fields
    pub Task: ::protobuf::SingularPtrField<TodoTaskEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateTaskRequest {
    fn default() -> &'a UpdateTaskRequest {
        <UpdateTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl UpdateTaskRequest {
    pub fn new() -> UpdateTaskRequest {
        ::std::default::Default::default()
    }

    // .todo.TodoTaskEntity Task = 1;


    pub fn get_Task(&self) -> &TodoTaskEntity {
        self.Task.as_ref().unwrap_or_else(|| TodoTaskEntity::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTaskEntity) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTaskEntity {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTaskEntity {
        self.Task.take().unwrap_or_else(|| TodoTaskEntity::new())
    }
}

impl ::protobuf::Message for UpdateTaskRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateTaskRequest {
        UpdateTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTaskEntity>>(
                    "Task",
                    |m: &UpdateTaskRequest| { &m.Task },
                    |m: &mut UpdateTaskRequest| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateTaskRequest>(
                    "UpdateTaskRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateTaskRequest {
        static mut instance: ::protobuf::lazy::Lazy<UpdateTaskRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateTaskRequest,
        };
        unsafe {
            instance.get(UpdateTaskRequest::new)
        }
    }
}

impl ::protobuf::Clear for UpdateTaskRequest {
    fn clear(&mut self) {
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateTaskResponse {
    // message fields
    pub Task: ::protobuf::SingularPtrField<TodoTaskEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateTaskResponse {
    fn default() -> &'a UpdateTaskResponse {
        <UpdateTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateTaskResponse {
    pub fn new() -> UpdateTaskResponse {
        ::std::default::Default::default()
    }

    // .todo.TodoTaskEntity Task = 1;


    pub fn get_Task(&self) -> &TodoTaskEntity {
        self.Task.as_ref().unwrap_or_else(|| TodoTaskEntity::default_instance())
    }
    pub fn clear_Task(&mut self) {
        self.Task.clear();
    }

    pub fn has_Task(&self) -> bool {
        self.Task.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Task(&mut self, v: TodoTaskEntity) {
        self.Task = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Task(&mut self) -> &mut TodoTaskEntity {
        if self.Task.is_none() {
            self.Task.set_default();
        }
        self.Task.as_mut().unwrap()
    }

    // Take field
    pub fn take_Task(&mut self) -> TodoTaskEntity {
        self.Task.take().unwrap_or_else(|| TodoTaskEntity::new())
    }
}

impl ::protobuf::Message for UpdateTaskResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.Task {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Task)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.Task.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.Task.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateTaskResponse {
        UpdateTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoTaskEntity>>(
                    "Task",
                    |m: &UpdateTaskResponse| { &m.Task },
                    |m: &mut UpdateTaskResponse| { &mut m.Task },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateTaskResponse>(
                    "UpdateTaskResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateTaskResponse {
        static mut instance: ::protobuf::lazy::Lazy<UpdateTaskResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateTaskResponse,
        };
        unsafe {
            instance.get(UpdateTaskResponse::new)
        }
    }
}

impl ::protobuf::Clear for UpdateTaskResponse {
    fn clear(&mut self) {
        self.Task.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ntodo.proto\x12\x04todo\"D\n\x0eTodoTaskEntity\x12\x0e\n\x02ID\x18\
    \x01\x20\x01(\x03R\x02ID\x12\"\n\x04Task\x18\x02\x20\x01(\x0b2\x0e.todo.\
    TodoTaskR\x04Task\"@\n\x08TodoTask\x12\x12\n\x04Name\x18\x02\x20\x01(\tR\
    \x04Name\x12\x20\n\x0bIsFininshed\x18\x03\x20\x01(\x08R\x0bIsFininshed\"\
    (\n\x0eGetTaskRequest\x12\x16\n\x06TaskID\x18\x01\x20\x01(\x03R\x06TaskI\
    D\";\n\x0fGetTaskResponse\x12(\n\x04Task\x18\x01\x20\x01(\x0b2\x14.todo.\
    TodoTaskEntityR\x04Task\"\x12\n\x10ListTasksRequest\"?\n\x11ListTasksRes\
    ponse\x12*\n\x05Tasks\x18\x01\x20\x03(\x0b2\x14.todo.TodoTaskEntityR\x05\
    Tasks\"4\n\x0eAddTaskRequest\x12\"\n\x04Task\x18\x01\x20\x01(\x0b2\x0e.t\
    odo.TodoTaskR\x04Task\";\n\x0fAddTaskResponse\x12(\n\x04Task\x18\x01\x20\
    \x01(\x0b2\x14.todo.TodoTaskEntityR\x04Task\"=\n\x11UpdateTaskRequest\
    \x12(\n\x04Task\x18\x01\x20\x01(\x0b2\x14.todo.TodoTaskEntityR\x04Task\"\
    >\n\x12UpdateTaskResponse\x12(\n\x04Task\x18\x01\x20\x01(\x0b2\x14.todo.\
    TodoTaskEntityR\x04Task2\xfa\x01\n\x04Todo\x128\n\x07GetTask\x12\x14.tod\
    o.GetTaskRequest\x1a\x15.todo.GetTaskResponse\"\0\x12>\n\tListTasks\x12\
    \x16.todo.ListTasksRequest\x1a\x17.todo.ListTasksResponse\"\0\x128\n\x07\
    AddTask\x12\x14.todo.AddTaskRequest\x1a\x15.todo.AddTaskResponse\"\0\x12\
    >\n\nUpdateTask\x12\x14.todo.AddTaskRequest\x1a\x18.todo.UpdateTaskRespo\
    nse\"\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
